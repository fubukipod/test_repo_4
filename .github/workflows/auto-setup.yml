name: 🔥 Full Auto-Setup for test_repo_-2

on:
  workflow_dispatch:
  pull_request:
    types: [opened, reopened]

jobs:
  ##########################################
  # 1. Create CODEOWNERS & PR Template
  ##########################################
  init-files:
    name: 🛠 Create CODEOWNERS & PR Template
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0   # ✅ Full history to prevent index-pack failures

      - name: Create required files
        run: |
          mkdir -p .github
          echo "*   @softservedata" > .github/CODEOWNERS
          cat <<'EOF' > .github/pull_request_template.md
          ## Describe your changes
          -

          ## Issue ticket number and link
          -

          ## Checklist before requesting a review
          - [ ] I have performed a self-review of my code
          - [ ] If it is a core feature, I have added thorough tests
          - [ ] Do we need to implement analytics?
          - [ ] Will this be part of a product update? If yes, describe briefly
          EOF

      - name: Commit and push templates (handle stale branch)
        run: |
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/fubukipod/test_repo_-2
          git fetch origin auto-setup-bot-templates || true
          # ✅ Reset if branch exists remotely
          if git ls-remote --exit-code origin auto-setup-bot-templates; then
            git checkout auto-setup-bot-templates || git checkout -B auto-setup-bot-templates
            git reset --hard origin/auto-setup-bot-templates
          else
            git checkout -B auto-setup-bot-templates
          fi
          # ✅ Merge main and resolve conflicts automatically
          git fetch origin main
          git merge origin/main -X ours --allow-unrelated-histories || true
          git add .github/CODEOWNERS .github/pull_request_template.md || true
          git commit -m "Automated: Added CODEOWNERS & PR template" || echo "No changes to commit"
          git gc --prune=now
          # ✅ Always push successfully
          git push origin auto-setup-bot-templates --force

  ##########################################
  # 2. Invite collaborator
  ##########################################
  invite-collaborator:
    name: 🤝 Invite softservedata
    runs-on: ubuntu-latest
    needs: init-files
    steps:
      - name: Invite collaborator via API
        run: |
          curl -X PUT \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/fubukipod/test_repo_-2/collaborators/softservedata \
            -d '{"permission":"push"}'

  ##########################################
  # 3. Ensure develop branch exists & set default
  ##########################################
  create-develop:
    name: 🌱 Ensure develop branch & set default
    runs-on: ubuntu-latest
    needs: invite-collaborator
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0

      - name: Create develop if missing (safe push)
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/fubukipod/test_repo_-2
          git fetch origin main
          if ! git ls-remote --heads https://x-access-token:${{ secrets.PAT }}@github.com/fubukipod/test_repo_-2 develop | grep develop; then
            git checkout -B develop origin/main
            git gc --prune=now
            git push origin develop --force-with-lease
          else
            echo "Develop branch already exists."
          fi

      - name: Set develop as default branch via API
        run: |
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/fubukipod/test_repo_-2 \
            -d '{"default_branch":"develop"}'

  ##########################################
  # 4. Apply branch protection rules
  ##########################################
  branch-protection:
    name: 🔒 Apply Branch Protection Rules
    runs-on: ubuntu-latest
    needs: create-develop
    steps:
      - name: Protect main branch via API
        run: |
          curl -X PUT \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Accept: application/vnd.github.luke-cage-preview+json" \
            https://api.github.com/repos/fubukipod/test_repo_-2/branches/main/protection \
            -d '{"required_pull_request_reviews":{"required_approving_review_count":1},"enforce_admins":true,"restrictions":null,"required_status_checks":null}'

      - name: Protect develop branch via API
        run: |
          curl -X PUT \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Accept: application/vnd.github.luke-cage-preview+json" \
            https://api.github.com/repos/fubukipod/test_repo_-2/branches/develop/protection \
            -d '{"required_pull_request_reviews":{"required_approving_review_count":2},"enforce_admins":true,"restrictions":null,"required_status_checks":null}'

  ##########################################
  # 5. Generate & add deploy key
  ##########################################
  add-deploy-key:
    name: 🔑 Add Deploy Key
    runs-on: ubuntu-latest
    needs: branch-protection
    steps:
      - name: Generate SSH key
        run: |
          ssh-keygen -t rsa -b 4096 -C "deploy_key" -f deploy_key -N ""
          PUB_KEY=$(cat deploy_key.pub | tr -d '\n')
          echo "PUB_KEY=$PUB_KEY" >> $GITHUB_ENV
          echo "PRIVATE_KEY<<EOF" >> $GITHUB_ENV
          cat deploy_key >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Upload deploy key via API
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/fubukipod/test_repo_-2/keys \
            -d "{\"title\":\"DEPLOY_KEY\",\"key\":\"${PUB_KEY}\",\"read_only\":false}"

  ##########################################
  # 6. Create GitHub project board
  ##########################################
  create-project:
    name: 📋 Create Project Board
    runs-on: ubuntu-latest
    needs: add-deploy-key
    steps:
      - name: Create project board via API
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.PAT }}" \
            -H "Accept: application/vnd.github.inertia-preview+json" \
            https://api.github.com/repos/fubukipod/test_repo_-2/projects \
            -d '{"name":"Automated Project","body":"Board created by GitHub Action"}'

  ##########################################
  # 7. Notify Discord on PR creation
  ##########################################
  notify-discord:
    name: 📢 Discord PR Notification
    runs-on: ubuntu-latest
    needs: create-project
    steps:
      - name: Send Discord Notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            🚀 **New PR in test_repo_-2**
            🔹 Title: ${{ github.event.pull_request.title }}
            👤 Author: ${{ github.actor }}
            🔗 Link: ${{ github.event.pull_request.html_url }}
